#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('kurachat-server:server')
const fs = require('fs')
const path = require('path')
const http = require('http')
const https = require('https')
const http2 = require('http2')
const WebSocket = require('ws')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
console.log("Listening on port", port)
app.set('port', port)

/**
 * Create HTTP server.
 */

const credentials = {
    key: fs.readFileSync(path.resolve(__dirname, "../ssl/private/server.pem")),
    cert: fs.readFileSync(path.resolve(__dirname, "../ssl/certs/server.pem"))
}

const server = http.createServer(app)
// const server = https.createServer(credentials, app)
// const server = http2.createServer(credentials, app)
// const server = http2.createSecureServer(credentials, app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Initialize WebSocket server instance.
 */

const wss = new WebSocket.Server({ server })

wss.on('connection', ws => {

    console.log(ws)

    ws.on('message', message => {
        
        console.log("Received", message);
        ws.send(message)

    })

    ws.send("Successful websocket connection");
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
